[tox]
envlist = flake8, py{37,38,39,310}, py{37,38,39,310}-data, benchmark, benchmark-cuda{101,102,110}, mypy

[testenv]
commands=
    pytest --durations=10 --cov=libertem_live --cov-report=term --cov-report=html --cov-report=xml --cov-config=setup.cfg --junitxml=junit.xml {posargs:tests/}
deps=
    -rtest_requirements.txt
    # Inject release candidates for testing
    -roverride_requirements.txt
    cuda101: cupy-cuda101
    cuda102: cupy-cuda102
    cuda110: cupy-cuda110
setenv=
    # Using pytest in combination with tox on files that are part of the installed package
    # leads to collisions between the local source tree and the installed package when running tests.
    # See https://github.com/pytest-dev/pytest/issues/2042
    PY_IGNORE_IMPORTMISMATCH=1
    # Debug asyncio problems - has some perf overhead, so only enable if there is a problem
    # PYTHONASYNCIODEBUG=1
    # Dask configuration to reduce background load:
    DASK_DISTRIBUTED__ADMIN__TICK__INTERVAL=1000
    DASK_DISTRIBUTED__SCHEDULER__WORK_STEALING_INTERVAL=1000
    DASK_DISTRIBUTED__WORKER__PROFILE__CYCLE=60000
    DASK_DISTRIBUTED__WORKER__PROFILE__INTERVAL=30000
    NUMBA_FULL_TRACEBACKS=1
    NUMBA_BOUNDSCHECK=1
    LIBERTEM_DECTRIS_LOG_LEVEL=warn
passenv=
    DASK_SCHEDULER_ADDRESS
    TESTDATA_BASE_PATH

[testenv:numba_coverage]
commands=
    pytest --durations=5 --cov=libertem_live --cov-report=term --cov-report=html --cov-report=xml --cov-config=setup.cfg -m with_numba --junitxml=junit.xml {posargs:tests/}
setenv=
    NUMBA_DISABLE_JIT=1

[testenv:py{37,38,39,310}-data]
deps=
    -rtest_requirements.txt
    # Inject release candidates for testing
    -roverride_requirements.txt
commands=
    pytest --durations=10 --cov=libertem_live --cov-report=term --cov-report=html --cov-report=xml --cov-config=setup.cfg --junitxml=junit.xml -m data {posargs:tests} -s -vvv
    pytest --doctest-modules --ignore=src/libertem_live/detectors/merlin/tango_server.py src/libertem_live/ -s

[testenv:notebooks]
deps=
    -rtest_requirements.txt
    # Inject release candidates for testing
    -roverride_requirements.txt
    nbval
    nbqa
allowlist_externals={toxinidir}/ci/run-with-sim.sh
commands=
    {toxinidir}/ci/run-with-sim.sh pytest --durations=10 --cov=libertem_live --cov-report=term --cov-config=setup.cfg --cov-report=html --cov-report=xml --junitxml=junit.xml --nbval --sanitize-with nbval_sanitize.cfg -p no:python --current-env {posargs:examples/}
passenv=
    TESTDATA_BASE_PATH

[testenv:benchmark]
changedir={toxinidir}
commands=
    pytest --benchmark-enable --benchmark-warmup=on --benchmark-autosave --benchmark-storage "{toxinidir}/benchmark_results" -m "not compilation" {posargs:benchmarks/}
    pytest --benchmark-enable --benchmark-warmup=off --benchmark-autosave --benchmark-storage "{toxinidir}/benchmark_results" -m "compilation" {posargs:benchmarks/}

[testenv:benchmark-cuda{101,102}]
changedir={toxinidir}
commands=
    {[testenv:benchmark]commands}


[testenv:flake8]
changedir={toxinidir}
deps=
    flake8
commands=
    flake8 --config=setup.cfg src/
skipsdist=True
skip_install=True

[testenv:mypy]
changedir={toxinidir}
deps =
  mypy
commands =
  mypy src/libertem_live
skip_install=True

# general QA stuff here, we don't want to fail the flake8 build for unrelated reasons
[testenv:qa]
changedir={toxinidir}
deps=
    pyroma
    pygments
    twine
commands=
    python setup.py sdist
    python setup.py bdist_wheel
    twine check dist/*
    pyroma -n 10 {toxinidir} {posargs}
skipsdist=True
skip_install=True

[testenv:docs]
changedir={toxinidir}
basepython=python3
allowlist_externals=
    make
setenv=
    PYTHONPATH={toxinidir}
commands=
    sphinx-autobuild -b html "{toxinidir}/docs/source" "{toxinidir}/docs/build/html" --port 8010 {posargs} -j auto
deps=
    -rdocs_requirements.txt
    # Inject release candidates for doctest testing
    -roverride_requirements.txt
skipsdist=True

# just a non-watching version of the docs environment above, also building twice for bibs
[testenv:docs-build-ci]
changedir={toxinidir}
basepython=python3
setenv=
    PYTHONPATH={toxinidir}
commands=
    # Two runs to get complete bibliography. The first one will throw warnings about missing
    # citations.
    sphinx-build -j auto -b html "{toxinidir}/docs/source" "{toxinidir}/docs/build/html"
    sphinx-build -j auto -W -b html "{toxinidir}/docs/source" "{toxinidir}/docs/build/html"
deps=
    -rdocs_requirements.txt
    # Inject release candidates for doctest testing
    -roverride_requirements.txt
skipsdist=True
passenv=
    HOME

[testenv:docs-check]
changedir={toxinidir}
basepython=python3
setenv=
    PYTHONPATH={toxinidir}
commands=
    # Two runs to get complete bibliography. The first one will throw warnings about missing
    # citations.
    sphinx-build -j auto -b html "{toxinidir}/docs/source" "{toxinidir}/docs/build/html"
    sphinx-build -j auto -W -b html "{toxinidir}/docs/source" "{toxinidir}/docs/build/html"
    sphinx-build -j auto -b doctest "{toxinidir}/docs/source" "{toxinidir}/docs/build/html"
    # sphinx-build -b linkcheck "{toxinidir}/docs/source" "{toxinidir}/docs/build/html"
    # cat docs/build/html/output.txt
deps=
    -rdocs_requirements.txt
    # Inject release candidates for doctest testing
    -roverride_requirements.txt
skipsdist=True
allowlist_externals=
    cat
passenv=
    HOME
    TESTDATA_BASE_PATH
