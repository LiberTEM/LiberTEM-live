trigger:
  branches:
    include:
      - master
      - 'v*'

variables:
  - group: Packaging
  - name: PIP_CACHE_DIR
    value: $(Pipeline.Workspace)/.pip
  - name: npm_config_cache
    value: $(Pipeline.Workspace)/.npm
  - name: tox_dir
    value: $(Build.Repository.LocalPath)/.tox

parameters:
  # by default, the tox environment is kept around, so we need this parameter
  # as a way to manually re-create it, in case dependencies change.
  - name: recreate_tox
    displayName: Recreate tox environments?
    type: boolean
    default: false

stages:
  - stage: test
    jobs:
    - job: check_example_notebooks
      pool: DataAccess
      variables:
        TESTDATA_BASE_PATH: '/data/'
      steps:
      - bash: find /data/
        displayName: 'list available data'

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.9'
        inputs:
          versionSpec: '3.9'

      - bash: python3.9 -m venv venv
        displayName: 'create venv'

      - bash: ./venv/bin/pip install tox
        displayName: 'install tox'

      - ${{ if eq(parameters.recreate_tox, true) }}:
        - bash: ./venv/bin/tox -e notebooks -r -- examples/*.ipynb -v
          displayName: 'Run nbval tests $(Agent.OS) (recreating)'

      - ${{ if eq(parameters.recreate_tox, false) }}:
        - bash: ./venv/bin/tox -e notebooks -- examples/*.ipynb -v
          displayName: 'Run nbval tests $(Agent.OS)'

      - bash: ./scripts/codecov.sh -f ./coverage.xml
        displayName: 'Submit coverage to codecov.io'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: 'junit.xml'
          testRunTitle: 'Publish test results for Python $(python.version)'

    - job: data_tests
      pool: DataAccess
      strategy:
        matrix:
          # 3.7: oldest version
          Python37:
            python.version: '3.7'
            TOXENV: 'py37-data'
          # Python38:
          #   python.version: '3.8'
          #   TOXENV: 'py38'
          # Most recent supported version
          Python39:
            python.version: '3.9'
            TOXENV: 'py39-data'
          Python310:
            python.version: '3.10'
            TOXENV: 'py310-data'
      variables:
        TESTDATA_BASE_PATH: '/data/'
      steps:
      - bash: find /data/
        displayName: 'list available data'

      - task: UsePythonVersion@0
        displayName: 'Use Python $(python.version)'
        inputs:
          versionSpec: '$(python.version)'

      - bash: python3.9 -m venv venv
        displayName: 'create venv'

      - bash: ./venv/bin/pip install tox
        displayName: 'install tox'

      - bash: ./venv/bin/tox -r
        displayName: 'Run tox tests $(TOXENV) $(Agent.OS)'

      - bash: ./scripts/codecov.sh -f ./coverage.xml
        displayName: 'Submit coverage to codecov.io'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: 'junit.xml'
          testRunTitle: 'Publish test results for Python $(python.version)'

    - job: linux_tests
      pool: DataAccess
      strategy:
        matrix:
          Python37:
            python.version: '3.7'
            TOXENV: 'py37'
          Python38:
            python.version: '3.8'
            TOXENV: 'py38'
          Python39:
            python.version: '3.9'
            TOXENV: 'py39'
          Python310:
            python.version: '3.10'
            TOXENV: 'py310'
      variables:
        TOXENV: '$(TOXENV)'
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python $(python.version)'
        inputs:
          versionSpec: '$(python.version)'

      - bash: pip install -U tox
        displayName: 'install requirements'

      - ${{ if eq(parameters.recreate_tox, true) }}:
        - bash: tox -r
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS) (recreating)'

      - ${{ if eq(parameters.recreate_tox, false) }}:
        - bash: tox
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS)'

      - bash: ./scripts/codecov.sh -f ./coverage.xml
        displayName: 'Submit coverage to codecov.io'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: 'junit.xml'
          testRunTitle: 'Publish test results for Python $(python.version)'

    - job: numba_coverage
      pool: DataAccess
      variables:
        TOXENV: 'numba_coverage'
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.9'
        inputs:
          versionSpec: '3.9'

      - bash: pip install -U tox
        displayName: 'install requirements'

      - ${{ if eq(parameters.recreate_tox, true) }}:
        - bash: tox -r
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS) (recreating)'

      - ${{ if eq(parameters.recreate_tox, false) }}:
        - bash: tox
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS)'

      - bash: ./scripts/codecov.sh -f ./coverage.xml
        displayName: 'Submit coverage to codecov.io'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: 'junit.xml'
          testRunTitle: 'Publish test results for numba coverage on Python 3.9'

    - job: lint
      pool: DataAccess
      strategy:
        matrix:
          docs-check:
            TOXENV: 'docs-check'
      variables:
        TOXENV: '$(TOXENV)'
        TESTDATA_BASE_PATH: '/data/'
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.9'
        inputs:
          versionSpec: '3.9'

      - bash: apt install -y pandoc
        displayName: install required debian packages
      - bash: pip install -U tox
        displayName: 'install requirements'

      - ${{ if eq(parameters.recreate_tox, true) }}:
        - bash: tox -r
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS) (recreating)'

      - ${{ if eq(parameters.recreate_tox, false) }}:
        - bash: tox
          displayName: 'Run tox tests $(TOXENV) $(Agent.OS)'

  - stage: deploy
    jobs:
    - job: deploy_docs
      pool: DataAccess
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.9'
        inputs:
          versionSpec: '3.9'
      - bash: apt install -y pandoc
        displayName: 'install required debian packages'

      - bash: pip install -U tox && pip install -r scripts/requirements.txt
        displayName: 'install requirements'

      - bash: tox -r -e docs-build-ci
        displayName: 'build docs'

      - task: DownloadSecureFile@1
        inputs:
          secureFile: deploy_key
        displayName: 'Get the deploy key'

      - script: |
          set -eu
          mkdir -p ~/.ssh && mv $DOWNLOADSECUREFILE_SECUREFILEPATH ~/.ssh/id_rsa
          chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
        condition: |
            and(not(eq(variables['Build.Reason'], 'PullRequest')),
                eq(variables['Build.SourceBranch'], 'refs/heads/master'))

      - bash: ./scripts/deploy_docs docs/build/html/
        displayName: 'deploy docs'
        condition: |
            and(not(eq(variables['Build.Reason'], 'PullRequest')),
                eq(variables['Build.SourceBranch'], 'refs/heads/master'))

    - job: make_upload_packages
      pool: DataAccess
      steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.9'
        inputs:
          versionSpec: '3.9'
      - script: |  # need to get rid of old build stuff, packages etc.
          rm -rf ./build/
          rm -rf ./dist/
      - bash: pip install -U tox && pip install -r scripts/requirements.txt
        displayName: 'install requirements'
      - bash: python scripts/release --verbose upload --no-dry-run
        displayName: 'Upload packages / release'
        env:
          LT_RELEASE_UPLOAD_PYPI_PASSWORD: $(LT_RELEASE_UPLOAD_PYPI_PASSWORD)
          LT_RELEASE_UPLOAD_PYPI_TEST_PASSWORD: $(LT_RELEASE_UPLOAD_PYPI_TEST_PASSWORD)
          LT_RELEASE_UPLOAD_TOKEN: $(LT_RELEASE_UPLOAD_TOKEN)
          LT_RELEASE_UPLOAD_ZENODO_SANDBOX_TOKEN: $(LT_RELEASE_UPLOAD_ZENODO_SANDBOX_TOKEN)
          LT_RELEASE_UPLOAD_ZENODO_TOKEN: $(LT_RELEASE_UPLOAD_ZENODO_TOKEN)
          LT_RELEASE_UPLOAD_ZENODO_SANDBOX_PARENT: $(LT_RELEASE_UPLOAD_ZENODO_SANDBOX_PARENT)
          LT_RELEASE_UPLOAD_ZENODO_PARENT: $(LT_RELEASE_UPLOAD_ZENODO_PARENT)
